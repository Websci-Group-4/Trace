
LAB PROJECT -- Version: Lab 6
=============================
By: Team Trace (Jacob Dyer, Deepti Sachi, Ethan Whitton, Q Russell, and Kenny Lee)


IMPORTANT:
==========
To see our Lab 6 work, navigate to 'http://localhost:4200/lab6'.


Work Log:
=========
Jacob Dyer
----------
Visualization 1: Tracking organizational power by its users total permissions broken down by type.
    > ENDPOINT: 'http://localhost:3000/organizations/power'
Visualization 2: Determining proportion of powerusers by counting every user's total permissions.
    > ENDPOINT: 'http://localhost:3000/users/powerusers'

Worklog:
- Set up the Angular for the project.
- Devised a method to "plug and play" with routers and static directories.
    > SEE 'server.js' AND 'config.json' for more.
- Wrote up the router outlines according to our API structure.
Part 1: Creating Your Datasets
- Figured out Mongoose Aggregation to create the two aggregation "queries" I need
  for each of my visualizations.
    - It took a lot of tinkering on MongoDB Compass to figure out Aggregation, but
      my work translates to Node nicely since Mongoose uses a light wrapper.
- Implemented my routes and got my data that way.
Part 2: Creating Your Visualizations
- Didn't have enough time for D3 with the schedule I keep, unfortunately.  Chose R instead.
- Struggled for a few hours with wrangling the .CSV data for R.  I suspect it's more
  learning curve related, since this is my first time using R.
Part 3: Displaying Your Visualizations
- Deepti created the Lab 6 Component so we can display our graphs and our CSV links,
  and I put my graphs up there as well.

Creativity:
- As mentioned in item 2 of my worklog, I approached the problem of adding and removing
  routers and static directories from a different angle and made it the domain of the
  configuration file.  This has the added benefit of further allowing us to check if
  a static directory or router is the source of an error on application startup.
- Longer term:
    - Wrote up Python code to incorporate Least Significant Bit steganography.  Have yet
      to figure out the particulars of inputting and outputting information, but it's
      there.  It's not up on any branch yet as I tinker with figuring out how to hook it
      into a Node project, but send me a Slack message if you would like to see the
      program in action.

Deepti Sachi
------------
Visualization 1: Tracking tag usage by user and corresponding uploads by tag.
Visualization 2: Tracking viewer frequency over time.

Worklog:
- I created a separate router function in User.Router and Image.Router to return a randomized .csv file. The link at http://localhost:4200/lab6 will return a .csv file for an arbitrarily selected ID, but other IDs should work as well.
Part 1: Creating Your Datasets
- I used an arbitrarily-chosen user ID to pull information from the database. I used a random Javascript function to simulate viewer counts and tags, since these are not provided by the database.
Part 2: Creating Your Visualizations
- I chose to use R to display visualizations, since D3 was difficult to implement. A simple lollipop graph was suitable for the viewer count, but I had trouble organizing a proper CSV format and therefore visualization for the tag usage. I ultimately settled on a treemap (where tags were the groups, and corresponding image uploads were the subgroups), though there was some difficulty in getting R to display the text at a proper size.
Part 3: Displaying Your Visualizations
- The images and router methods can be used at http://localhost:4200/lab6

Creativity:
- T

Ethan Whitton
-------------
Visualization 1: See which types of users have interacted with an image the most https://observablehq.com/@d3/marimekko-chart
Visualization 2: View entire breakdown of users by organizations as well https://observablehq.com/@d3/radial-dendrogram

Worklog:
- T
Part 1: Creating Your Datasets
- I wrote a data randomizer script called seed.js. `npm run seed` will reinitialize the database with random data
Part 2: Creating Your Visualizations
- I used d3 (nodejs side) to generate SVGs and send them back to the client. The data is obviously also parsed on the back end
Part 3: Displaying Your Visualizations
- I simply had to add another element to the page with the resulting pre-rendered visualizations

Creativity:
- I think the charts I chose are kinda creative, and the data is live-updating so that's cool

Q Russell
---------
Visualization 1:
Visualization 2:

Worklog:
- T
Part 1: Creating Your Datasets
- T
Part 2: Creating Your Visualizations
- T
Part 3: Displaying Your Visualizations
- T

Creativity:
- T

Kenny Lee
---------
Visualization 1: Showing number of users in each organisation
Visualization 2: Number of views on each image, bar chart

Worklog:
- T
Part 1: Creating Your Datasets
- I used Mongoose Aggregation to pull out queries for my data
Part 2: Creating Your Visualizations
- I used R studio to create the visualizations.
- My first one is a simple breakdown of the users in each organization, I used a bar chart for this as it is clean and simple.
- My second visualization is of number of views on each image in our database. I predicted that the smaller the number of the image, which implies that it was made earlier, would get more traffic compare to other images.
Part 3: Displaying Your Visualizations
- I put it up on lab6 components along with the csv download.
- For my second visualization, my predictions were accurate with a few anomalies. A trend line was drawn to show a negative correlation between image number and number of views. 

Creativity:
- T


Resources Used:
===============
1. https://observablehq.com/@d3/gallery
